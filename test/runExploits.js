const fs = require("fs");
const base = require("./BaseFunctions.js")

function isNumber(n) { return /^-?[\d.]+(?:e-?\d+)?$/.test(n); }
const walk = function(dir) {
    let results = [];
    let list = fs.readdirSync(dir);
    list.forEach(function(file) {
        file = dir + '/' + file;
        let stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            /* Recurse into a subdirectory */
            results = results.concat(walk(file));
        } else {
            /* Is a file */
            results.push(file);
        }
    });
    return results;
};


let exploitsList = walk( "/Users/vdata/Desktop/js-isolation/js-isolation/analysis/Minimized_Exploits/secError/realms-shim");

let secError = 0;
//let polluted = "No";
let callBack = console.log;
//let assert  = require("assert");

var $262 = {
    detachArrayBuffer() {
        throw new Test262Error('$262.detachArrayBuffer called.');
    },
    destroy() {}
};

let customRequire = function(arg) {
    if (arg.indexOf(".") != -1)
        return require(path.resolve(path.dirname(id), arg));
    else
        return require(arg);
}

let indivStats = {oracleChecks: 0};
let endows = {
  //  assert : assert,
  //  assertEquals: assert.equal,

    isConstructor: () => {},
    $262 : $262,
    stats: indivStats,
    require: customRequire,
    console: console,
    Test262Error: Error,
    $DONE: function() {},
    leak: (msg) => {
        console.log(msg)
        if (msg.indexOf("SB-SUCCESS") != -1 || (Object.prototype.polluted || Object.prototype.FEA || Object.prototype.FET || Object.prototype.FIA || Object.prototype.FIT || Object.prototype.CCA || Object.prototype.CCT))
            secError = 1;
        console.log(secError);
        callBack(secError);
    },
    // ########### BASE FUNCTIONS ###########

     $DONE : base.$DONE,
    assert : base.assert,
    $ERROR : base.$ERROR,
  //  getReport : getReport,
    __isArray : base.__isArray,
    taintArray : base.taintArray,
    TypedArray : base.TypedArray,
    isWritable : base.isWritable,
    testOption : base.testOption,
    isSameValue : base.isSameValue,
    end_of_time : base.end_of_time,
    buildString : base.buildString,
    taintMethod : base.taintMethod,
    isEnumerable : base.isEnumerable,
    Test262Error : base.Test262Error,
    Test262Error : base.Test262Error,
    asyncGCDeref : base.asyncGCDeref,
    compareArray : base.compareArray,
   // $DETACHBUFFER : $DETACHBUFFER,
    start_of_time : base.start_of_time,
    date_2099_end : base.date_2099_end,
    date_1969_end : base.date_1969_end,
    date_1899_end : base.date_1899_end,
    date_1999_end : base.date_1999_end,
    checkSequence : base.checkSequence,
    verifyEqualTo : base.verifyEqualTo,
    isConstructor : base.isConstructor,
    arrayContains : base.arrayContains,
    AsyncFunction : base.AsyncFunction,
    __globalObject : base.__globalObject,
    resolveAsyncGC : base.resolveAsyncGC,
    verifyWritable : base.verifyWritable,
    $DONOTEVALUATE : base.$DONOTEVALUATE,
    verifyProperty : base.verifyProperty,
    isConfigurable : base.isConfigurable,
    matchValidator : base.matchValidator,
    $MAX_ITERATIONS : base.$MAX_ITERATIONS,
    allowProxyTraps : base.allowProxyTraps,
    date_1970_start : base.date_1970_start,
    date_1900_start : base.date_1900_start,
    date_2000_start : base.date_2000_start,
    date_2100_start : base.date_2100_start,
    taintProperties : base.taintProperties,
    testNumberFormat : base.testNumberFormat,
    regExpProperties : base.regExpProperties,
    verifyEnumerable : base.verifyEnumerable,
    taintDataProperty : base.taintDataProperty,
    verifyNotWritable : base.verifyNotWritable,
    GeneratorFunction : base.GeneratorFunction,
    decimalToHexString : base.decimalToHexString,
    verifyConfigurable : base.verifyConfigurable,
    AsyncArrowFunction : base.AsyncArrowFunction,
    testPropertyEscapes : base.testPropertyEscapes,
    verifyNotEnumerable : base.verifyNotEnumerable,
    getLocaleSupportInfo : base.getLocaleSupportInfo,
    checkSettledPromises : base.checkSettledPromises,
    assertRelativeDateMs : base.assertRelativeDateMs,
    byteConversionValues : base.byteConversionValues,
    assertNativeFunction : base.assertNativeFunction,
    intArrayConstructors : base.intArrayConstructors,
    getDateTimeComponents : base.getDateTimeComponents,
    numberingSystemDigits : base.numberingSystemDigits,
    verifyNotConfigurable : base.verifyNotConfigurable,
    getInvalidLanguageTags : base.getInvalidLanguageTags,
    AsyncGeneratorFunction : base.AsyncGeneratorFunction,
    isValidNumberingSystem : base.isValidNumberingSystem,
    __consolePrintHandle__ : base.__consolePrintHandle__,
    floatArrayConstructors : base.floatArrayConstructors,
    testWithIntlConstructors : base.testWithIntlConstructors,
    testTypedArrayConversions : base.testTypedArrayConversions,
    decimalToPercentHexString : base.decimalToPercentHexString,
    getInvalidLocaleArguments : base.getInvalidLocaleArguments,
    WellKnownIntrinsicObjects : base.WellKnownIntrinsicObjects,
    getDateTimeComponentValues : base.getDateTimeComponentValues,
    testWithAtomicsNonViewValues : base.testWithAtomicsNonViewValues,
    testForUnwantedRegExpChanges : base.testForUnwantedRegExpChanges,
    validateNativeFunctionSource : base.validateNativeFunctionSource,
    regExpPropertiesDefaultValues : base.regExpPropertiesDefaultValues,
    testWithAtomicsInBoundsIndices : base.testWithAtomicsInBoundsIndices,
    assertToStringOrNativeFunction : base.assertToStringOrNativeFunction,
    testWithAtomicsOutOfBoundsIndices : base.testWithAtomicsOutOfBoundsIndices,
    testWithBigIntTypedArrayConstructors : base.testWithBigIntTypedArrayConstructors,
    isCanonicalizedStructurallyValidLanguageTag : base.isCanonicalizedStructurallyValidLanguageTag,
    isCanonicalizedStructurallyValidTimeZoneName : base.isCanonicalizedStructurallyValidTimeZoneName,
    testWithAtomicsFriendlyTypedArrayConstructors : base.testWithAtomicsFriendlyTypedArrayConstructors,
    testWithNonAtomicsFriendlyTypedArrayConstructors : base.testWithNonAtomicsFriendlyTypedArrayConstructors,


};

const Realm = require('realms-shim/dist/realms-shim.cjs.js');

for(let i = 0; i < exploitsList.length; i++) {


    if(!isNumber(exploitsList[i].split("/")[10][0])){
    let code = fs.readFileSync(exploitsList[i]).toString();
    try {
        let realm = Realm.makeRootRealm();
        realm.evaluate(code, endows);
        console.log("Running: ", i);
    }catch (e){
        console.log(e);
    }

        //console.log(Object.prototype.p, {}.polluted, Object.prototype.FEA, Object.prototype.FET, Object.prototype.FIA, Object.prototype.FIT, Object.prototype.CCA, Object.prototype.CCT);
        if(Object.prototype.p || {}.polluted || Object.prototype.FEA || Object.prototype.FET || Object.prototype.FIA || Object.prototype.FIT || Object.prototype.CCA || Object.prototype.CCT){
            console.log(exploitsList[i]);
            delete Object.prototype.p;
            delete {}.polluted;
            delete  Object.prototype.FEA;
            delete  Object.prototype.FET;
            delete Object.prototype.FIA;
            delete Object.prototype.FIT;
            delete Object.prototype.CCA;
            delete Object.prototype.CCT;
            }
    }
}