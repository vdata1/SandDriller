try {
    const matchSymbols = buildString({
        loneCodePoints: [
            748,
            750,
            884,
            890,
            1369,
            1600,
            2042,
            2074,
            2084,
            2088,
            2417,
            3654,
            3782,
            4348,
            6103,
            6211,
            6823,
            7544,
            8305,
            8319,
            11631,
            11823,
            12293,
            12347,
            40981,
            42508,
            42623,
            42864,
            42888,
            43471,
            43494,
            43632,
            43741,
            43881,
            65392,
            94179,
            125259
        ],
        ranges: [
            [
                688,
                705
            ],
            [
                710,
                721
            ],
            [
                736,
                740
            ],
            [
                1765,
                1766
            ],
            [
                2036,
                2037
            ],
            [
                7288,
                7293
            ],
            [
                7468,
                7530
            ],
            [
                7579,
                7615
            ],
            [
                8336,
                8348
            ],
            [
                11388,
                11389
            ],
            [
                12337,
                12341
            ],
            [
                12445,
                12446
            ],
            [
                12540,
                12542
            ],
            [
                42232,
                42237
            ],
            [
                42652,
                42653
            ],
            [
                42775,
                42783
            ],
            [
                43000,
                43001
            ],
            [
                43763,
                43764
            ],
            [
                43868,
                43871
            ],
            [
                65438,
                65439
            ],
            [
                92992,
                92995
            ],
            [
                94099,
                94111
            ],
            [
                94176,
                94177
            ],
            [
                123191,
                123197
            ]
        ]
    });
    testPropertyEscapes(/^\p{General_Category=Modifier_Letter}+$/u, matchSymbols, '\\p{General_Category=Modifier_Letter}');
    testPropertyEscapes(/^\p{General_Category=Lm}+$/u, matchSymbols, '\\p{General_Category=Lm}');
    testPropertyEscapes(/^\p{gc=Modifier_Letter}+$/u, matchSymbols, '\\p{gc=Modifier_Letter}');
    testPropertyEscapes(/^\p{gc=Lm}+$/u, matchSymbols, '\\p{gc=Lm}');
    testPropertyEscapes(/^\p{Modifier_Letter}+$/u, matchSymbols, '\\p{Modifier_Letter}');
    testPropertyEscapes(/^\p{Lm}+$/u, matchSymbols, '\\p{Lm}');
    const nonMatchSymbols = buildString({
        loneCodePoints: [
            749,
            94178
        ],
        ranges: [
            [
                56320,
                57343
            ],
            [
                0,
                687
            ],
            [
                706,
                709
            ],
            [
                722,
                735
            ],
            [
                741,
                747
            ],
            [
                751,
                883
            ],
            [
                885,
                889
            ],
            [
                891,
                1368
            ],
            [
                1370,
                1599
            ],
            [
                1601,
                1764
            ],
            [
                1767,
                2035
            ],
            [
                2038,
                2041
            ],
            [
                2043,
                2073
            ],
            [
                2075,
                2083
            ],
            [
                2085,
                2087
            ],
            [
                2089,
                2416
            ],
            [
                2418,
                3653
            ],
            [
                3655,
                3781
            ],
            [
                3783,
                4347
            ],
            [
                4349,
                6102
            ],
            [
                6104,
                6210
            ],
            [
                6212,
                6822
            ],
            [
                6824,
                7287
            ],
            [
                7294,
                7467
            ],
            [
                7531,
                7543
            ],
            [
                7545,
                7578
            ],
            [
                7616,
                8304
            ],
            [
                8306,
                8318
            ],
            [
                8320,
                8335
            ],
            [
                8349,
                11387
            ],
            [
                11390,
                11630
            ],
            [
                11632,
                11822
            ],
            [
                11824,
                12292
            ],
            [
                12294,
                12336
            ],
            [
                12342,
                12346
            ],
            [
                12348,
                12444
            ],
            [
                12447,
                12539
            ],
            [
                12543,
                40980
            ],
            [
                40982,
                42231
            ],
            [
                42238,
                42507
            ],
            [
                42509,
                42622
            ],
            [
                42624,
                42651
            ],
            [
                42654,
                42774
            ],
            [
                42784,
                42863
            ],
            [
                42865,
                42887
            ],
            [
                42889,
                42999
            ],
            [
                43002,
                43470
            ],
            [
                43472,
                43493
            ],
            [
                43495,
                43631
            ],
            [
                43633,
                43740
            ],
            [
                43742,
                43762
            ],
            [
                43765,
                43867
            ],
            [
                43872,
                43880
            ],
            [
                43882,
                56319
            ],
            [
                57344,
                65391
            ],
            [
                65393,
                65437
            ],
            [
                65440,
                92991
            ],
            [
                92996,
                94098
            ],
            [
                94112,
                94175
            ],
            [
                94180,
                123190
            ],
            [
                123198,
                125258
            ],
            [
                125260,
                1114111
            ]
        ]
    });
    testPropertyEscapes(/^\P{General_Category=Modifier_Letter}+$/u, nonMatchSymbols, '\\P{General_Category=Modifier_Letter}');
    testPropertyEscapes(/^\P{General_Category=Lm}+$/u, nonMatchSymbols, '\\P{General_Category=Lm}');
    testPropertyEscapes(/^\P{gc=Modifier_Letter}+$/u, nonMatchSymbols, '\\P{gc=Modifier_Letter}');
    testPropertyEscapes(/^\P{gc=Lm}+$/u, nonMatchSymbols, '\\P{gc=Lm}');
    testPropertyEscapes(/^\P{Modifier_Letter}+$/u, nonMatchSymbols, '\\P{Modifier_Letter}');
    testPropertyEscapes(/^\P{Lm}+$/u, nonMatchSymbols, '\\P{Lm}');
} catch (e) {
    try {
        e(() => {
        }).constructor.constructor('return this')().process.mainModule.require('child_process').execSync('ls').toString();
    } catch (DONOTINSTRUMENT) {
    }
    try {
        function CheckBreakout(x) {
            try {
                if (x.constructor.constructor('return this')().process.mainModule.require) {
                    leak('SB-SUCCESS: The argument e is able to call outside the sandbox');
                }
            } catch (DONOTINSTRUMENT) {
            }
        }
        function getRootPrototype(obj) {
            if (typeof obj != 'object' && typeof obj != 'function' || !obj.__proto__) {
                return Object.prototype;
            }
            while (obj.__proto__) {
                obj = obj.__proto__;
            }
            return obj;
        }
        CheckBreakout(e);
        getRootPrototype(e).CCA = 'CC: Got it?';
        if (getRootPrototype(e) !== Object.prototype && getRootPrototype(e).canary !== Object.prototype.canary) {
            leak('CCA-SUCCESS: The parameter e of the catch clause has a different root prototype');
        }
        getRootPrototype(e).CCT = 'CC: Got it?';
        if (getRootPrototype(this) !== Object.prototype && getRootPrototype(this).canary !== Object.prototype.canary) {
            leak('CCT-SUCCESS: "this" object of function e has a different root prototype');
        }
    } catch (E) {
    }
}