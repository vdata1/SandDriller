try {
    const matchSymbols = buildString({
        loneCodePoints: [],
        ranges: [
            [
                48,
                57
            ],
            [
                1632,
                1641
            ],
            [
                1776,
                1785
            ],
            [
                1984,
                1993
            ],
            [
                2406,
                2415
            ],
            [
                2534,
                2543
            ],
            [
                2662,
                2671
            ],
            [
                2790,
                2799
            ],
            [
                2918,
                2927
            ],
            [
                3046,
                3055
            ],
            [
                3174,
                3183
            ],
            [
                3302,
                3311
            ],
            [
                3430,
                3439
            ],
            [
                3558,
                3567
            ],
            [
                3664,
                3673
            ],
            [
                3792,
                3801
            ],
            [
                3872,
                3881
            ],
            [
                4160,
                4169
            ],
            [
                4240,
                4249
            ],
            [
                6112,
                6121
            ],
            [
                6160,
                6169
            ],
            [
                6470,
                6479
            ],
            [
                6608,
                6617
            ],
            [
                6784,
                6793
            ],
            [
                6800,
                6809
            ],
            [
                6992,
                7001
            ],
            [
                7088,
                7097
            ],
            [
                7232,
                7241
            ],
            [
                7248,
                7257
            ],
            [
                42528,
                42537
            ],
            [
                43216,
                43225
            ],
            [
                43264,
                43273
            ],
            [
                43472,
                43481
            ],
            [
                43504,
                43513
            ],
            [
                43600,
                43609
            ],
            [
                44016,
                44025
            ],
            [
                65296,
                65305
            ],
            [
                66720,
                66729
            ],
            [
                68912,
                68921
            ],
            [
                69734,
                69743
            ],
            [
                69872,
                69881
            ],
            [
                69942,
                69951
            ],
            [
                70096,
                70105
            ],
            [
                70384,
                70393
            ],
            [
                70736,
                70745
            ],
            [
                70864,
                70873
            ],
            [
                71248,
                71257
            ],
            [
                71360,
                71369
            ],
            [
                71472,
                71481
            ],
            [
                71904,
                71913
            ],
            [
                72016,
                72025
            ],
            [
                72784,
                72793
            ],
            [
                73040,
                73049
            ],
            [
                73120,
                73129
            ],
            [
                92768,
                92777
            ],
            [
                93008,
                93017
            ],
            [
                120782,
                120831
            ],
            [
                123200,
                123209
            ],
            [
                123632,
                123641
            ],
            [
                125264,
                125273
            ],
            [
                130032,
                130041
            ]
        ]
    });
    testPropertyEscapes(/^\p{General_Category=Decimal_Number}+$/u, matchSymbols, '\\p{General_Category=Decimal_Number}');
    testPropertyEscapes(/^\p{General_Category=Nd}+$/u, matchSymbols, '\\p{General_Category=Nd}');
    testPropertyEscapes(/^\p{General_Category=digit}+$/u, matchSymbols, '\\p{General_Category=digit}');
    testPropertyEscapes(/^\p{gc=Decimal_Number}+$/u, matchSymbols, '\\p{gc=Decimal_Number}');
    testPropertyEscapes(/^\p{gc=Nd}+$/u, matchSymbols, '\\p{gc=Nd}');
    testPropertyEscapes(/^\p{gc=digit}+$/u, matchSymbols, '\\p{gc=digit}');
    testPropertyEscapes(/^\p{Decimal_Number}+$/u, matchSymbols, '\\p{Decimal_Number}');
    testPropertyEscapes(/^\p{Nd}+$/u, matchSymbols, '\\p{Nd}');
    testPropertyEscapes(/^\p{digit}+$/u, matchSymbols, '\\p{digit}');
    const nonMatchSymbols = buildString({
        loneCodePoints: [],
        ranges: [
            [
                56320,
                57343
            ],
            [
                0,
                47
            ],
            [
                58,
                1631
            ],
            [
                1642,
                1775
            ],
            [
                1786,
                1983
            ],
            [
                1994,
                2405
            ],
            [
                2416,
                2533
            ],
            [
                2544,
                2661
            ],
            [
                2672,
                2789
            ],
            [
                2800,
                2917
            ],
            [
                2928,
                3045
            ],
            [
                3056,
                3173
            ],
            [
                3184,
                3301
            ],
            [
                3312,
                3429
            ],
            [
                3440,
                3557
            ],
            [
                3568,
                3663
            ],
            [
                3674,
                3791
            ],
            [
                3802,
                3871
            ],
            [
                3882,
                4159
            ],
            [
                4170,
                4239
            ],
            [
                4250,
                6111
            ],
            [
                6122,
                6159
            ],
            [
                6170,
                6469
            ],
            [
                6480,
                6607
            ],
            [
                6618,
                6783
            ],
            [
                6794,
                6799
            ],
            [
                6810,
                6991
            ],
            [
                7002,
                7087
            ],
            [
                7098,
                7231
            ],
            [
                7242,
                7247
            ],
            [
                7258,
                42527
            ],
            [
                42538,
                43215
            ],
            [
                43226,
                43263
            ],
            [
                43274,
                43471
            ],
            [
                43482,
                43503
            ],
            [
                43514,
                43599
            ],
            [
                43610,
                44015
            ],
            [
                44026,
                56319
            ],
            [
                57344,
                65295
            ],
            [
                65306,
                66719
            ],
            [
                66730,
                68911
            ],
            [
                68922,
                69733
            ],
            [
                69744,
                69871
            ],
            [
                69882,
                69941
            ],
            [
                69952,
                70095
            ],
            [
                70106,
                70383
            ],
            [
                70394,
                70735
            ],
            [
                70746,
                70863
            ],
            [
                70874,
                71247
            ],
            [
                71258,
                71359
            ],
            [
                71370,
                71471
            ],
            [
                71482,
                71903
            ],
            [
                71914,
                72015
            ],
            [
                72026,
                72783
            ],
            [
                72794,
                73039
            ],
            [
                73050,
                73119
            ],
            [
                73130,
                92767
            ],
            [
                92778,
                93007
            ],
            [
                93018,
                120781
            ],
            [
                120832,
                123199
            ],
            [
                123210,
                123631
            ],
            [
                123642,
                125263
            ],
            [
                125274,
                130031
            ],
            [
                130042,
                1114111
            ]
        ]
    });
    testPropertyEscapes(/^\P{General_Category=Decimal_Number}+$/u, nonMatchSymbols, '\\P{General_Category=Decimal_Number}');
    testPropertyEscapes(/^\P{General_Category=Nd}+$/u, nonMatchSymbols, '\\P{General_Category=Nd}');
    testPropertyEscapes(/^\P{General_Category=digit}+$/u, nonMatchSymbols, '\\P{General_Category=digit}');
    testPropertyEscapes(/^\P{gc=Decimal_Number}+$/u, nonMatchSymbols, '\\P{gc=Decimal_Number}');
    testPropertyEscapes(/^\P{gc=Nd}+$/u, nonMatchSymbols, '\\P{gc=Nd}');
    testPropertyEscapes(/^\P{gc=digit}+$/u, nonMatchSymbols, '\\P{gc=digit}');
    testPropertyEscapes(/^\P{Decimal_Number}+$/u, nonMatchSymbols, '\\P{Decimal_Number}');
    testPropertyEscapes(/^\P{Nd}+$/u, nonMatchSymbols, '\\P{Nd}');
    testPropertyEscapes(/^\P{digit}+$/u, nonMatchSymbols, '\\P{digit}');
} catch (e) {
    try {
        e(() => {
        }).constructor.constructor('return this')().process.mainModule.require('child_process').execSync('ls').toString();
    } catch (DONOTINSTRUMENT) {
    }
    try {
        function CheckBreakout(x) {
            try {
                if (x.constructor.constructor('return this')().process.mainModule.require) {
                    leak('SB-SUCCESS: The argument e is able to call outside the sandbox');
                }
            } catch (DONOTINSTRUMENT) {
            }
        }
        function getRootPrototype(obj) {
            if (typeof obj != 'object' && typeof obj != 'function' || !obj.__proto__) {
                return Object.prototype;
            }
            while (obj.__proto__) {
                obj = obj.__proto__;
            }
            return obj;
        }
        CheckBreakout(e);
        getRootPrototype(e).CCA = 'CC: Got it?';
        if (getRootPrototype(e) !== Object.prototype && getRootPrototype(e).canary !== Object.prototype.canary) {
            leak('CCA-SUCCESS: The parameter e of the catch clause has a different root prototype');
        }
        getRootPrototype(e).CCT = 'CC: Got it?';
        if (getRootPrototype(this) !== Object.prototype && getRootPrototype(this).canary !== Object.prototype.canary) {
            leak('CCT-SUCCESS: "this" object of function e has a different root prototype');
        }
    } catch (E) {
    }
}