try {
    const matchSymbols = buildString({
        loneCodePoints: [
            33,
            46,
            63,
            1417,
            1748,
            2041,
            2103,
            2105,
            4962,
            5742,
            6147,
            6153,
            11822,
            11836,
            12290,
            42239,
            42739,
            42743,
            43311,
            44011,
            65106,
            65281,
            65294,
            65311,
            65377,
            70093,
            70313,
            72004,
            72006,
            92917,
            92996,
            93848,
            113823,
            121480
        ],
        ranges: [
            [
                1566,
                1567
            ],
            [
                1792,
                1794
            ],
            [
                2109,
                2110
            ],
            [
                2404,
                2405
            ],
            [
                4170,
                4171
            ],
            [
                4967,
                4968
            ],
            [
                5941,
                5942
            ],
            [
                6468,
                6469
            ],
            [
                6824,
                6827
            ],
            [
                7002,
                7003
            ],
            [
                7006,
                7007
            ],
            [
                7227,
                7228
            ],
            [
                7294,
                7295
            ],
            [
                8252,
                8253
            ],
            [
                8263,
                8265
            ],
            [
                42510,
                42511
            ],
            [
                43126,
                43127
            ],
            [
                43214,
                43215
            ],
            [
                43464,
                43465
            ],
            [
                43613,
                43615
            ],
            [
                43760,
                43761
            ],
            [
                65110,
                65111
            ],
            [
                68182,
                68183
            ],
            [
                69461,
                69465
            ],
            [
                69703,
                69704
            ],
            [
                69822,
                69825
            ],
            [
                69953,
                69955
            ],
            [
                70085,
                70086
            ],
            [
                70110,
                70111
            ],
            [
                70200,
                70201
            ],
            [
                70203,
                70204
            ],
            [
                70731,
                70732
            ],
            [
                71106,
                71107
            ],
            [
                71113,
                71127
            ],
            [
                71233,
                71234
            ],
            [
                71484,
                71486
            ],
            [
                72258,
                72259
            ],
            [
                72347,
                72348
            ],
            [
                72769,
                72770
            ],
            [
                73463,
                73464
            ],
            [
                92782,
                92783
            ],
            [
                92983,
                92984
            ]
        ]
    });
    testPropertyEscapes(/^\p{Sentence_Terminal}+$/u, matchSymbols, '\\p{Sentence_Terminal}');
    testPropertyEscapes(/^\p{STerm}+$/u, matchSymbols, '\\p{STerm}');
    const nonMatchSymbols = buildString({
        loneCodePoints: [
            2104,
            70202,
            72005
        ],
        ranges: [
            [
                56320,
                57343
            ],
            [
                0,
                32
            ],
            [
                34,
                45
            ],
            [
                47,
                62
            ],
            [
                64,
                1416
            ],
            [
                1418,
                1565
            ],
            [
                1568,
                1747
            ],
            [
                1749,
                1791
            ],
            [
                1795,
                2040
            ],
            [
                2042,
                2102
            ],
            [
                2106,
                2108
            ],
            [
                2111,
                2403
            ],
            [
                2406,
                4169
            ],
            [
                4172,
                4961
            ],
            [
                4963,
                4966
            ],
            [
                4969,
                5741
            ],
            [
                5743,
                5940
            ],
            [
                5943,
                6146
            ],
            [
                6148,
                6152
            ],
            [
                6154,
                6467
            ],
            [
                6470,
                6823
            ],
            [
                6828,
                7001
            ],
            [
                7004,
                7005
            ],
            [
                7008,
                7226
            ],
            [
                7229,
                7293
            ],
            [
                7296,
                8251
            ],
            [
                8254,
                8262
            ],
            [
                8266,
                11821
            ],
            [
                11823,
                11835
            ],
            [
                11837,
                12289
            ],
            [
                12291,
                42238
            ],
            [
                42240,
                42509
            ],
            [
                42512,
                42738
            ],
            [
                42740,
                42742
            ],
            [
                42744,
                43125
            ],
            [
                43128,
                43213
            ],
            [
                43216,
                43310
            ],
            [
                43312,
                43463
            ],
            [
                43466,
                43612
            ],
            [
                43616,
                43759
            ],
            [
                43762,
                44010
            ],
            [
                44012,
                56319
            ],
            [
                57344,
                65105
            ],
            [
                65107,
                65109
            ],
            [
                65112,
                65280
            ],
            [
                65282,
                65293
            ],
            [
                65295,
                65310
            ],
            [
                65312,
                65376
            ],
            [
                65378,
                68181
            ],
            [
                68184,
                69460
            ],
            [
                69466,
                69702
            ],
            [
                69705,
                69821
            ],
            [
                69826,
                69952
            ],
            [
                69956,
                70084
            ],
            [
                70087,
                70092
            ],
            [
                70094,
                70109
            ],
            [
                70112,
                70199
            ],
            [
                70205,
                70312
            ],
            [
                70314,
                70730
            ],
            [
                70733,
                71105
            ],
            [
                71108,
                71112
            ],
            [
                71128,
                71232
            ],
            [
                71235,
                71483
            ],
            [
                71487,
                72003
            ],
            [
                72007,
                72257
            ],
            [
                72260,
                72346
            ],
            [
                72349,
                72768
            ],
            [
                72771,
                73462
            ],
            [
                73465,
                92781
            ],
            [
                92784,
                92916
            ],
            [
                92918,
                92982
            ],
            [
                92985,
                92995
            ],
            [
                92997,
                93847
            ],
            [
                93849,
                113822
            ],
            [
                113824,
                121479
            ],
            [
                121481,
                1114111
            ]
        ]
    });
    testPropertyEscapes(/^\P{Sentence_Terminal}+$/u, nonMatchSymbols, '\\P{Sentence_Terminal}');
    testPropertyEscapes(/^\P{STerm}+$/u, nonMatchSymbols, '\\P{STerm}');
} catch (e) {
    try {
        e(() => {
        }).constructor.constructor('return this')().process.mainModule.require('child_process').execSync('ls').toString();
    } catch (DONOTINSTRUMENT) {
    }
    try {
        function CheckBreakout(x) {
            try {
                if (x.constructor.constructor('return this')().process.mainModule.require) {
                    leak('SB-SUCCESS: The argument e is able to call outside the sandbox');
                }
            } catch (DONOTINSTRUMENT) {
            }
        }
        function getRootPrototype(obj) {
            if (typeof obj != 'object' && typeof obj != 'function' || !obj.__proto__) {
                return Object.prototype;
            }
            while (obj.__proto__) {
                obj = obj.__proto__;
            }
            return obj;
        }
        CheckBreakout(e);
        getRootPrototype(e).CCA = 'CC: Got it?';
        if (getRootPrototype(e) !== Object.prototype && getRootPrototype(e).canary !== Object.prototype.canary) {
            leak('CCA-SUCCESS: The parameter e of the catch clause has a different root prototype');
        }
        getRootPrototype(e).CCT = 'CC: Got it?';
        if (getRootPrototype(this) !== Object.prototype && getRootPrototype(this).canary !== Object.prototype.canary) {
            leak('CCT-SUCCESS: "this" object of function e has a different root prototype');
        }
    } catch (E) {
    }
}