try {
    const matchSymbols = buildString({
        loneCodePoints: [
            43,
            124,
            126,
            172,
            177,
            215,
            247,
            1014,
            8260,
            8274,
            8472,
            8523,
            8608,
            8611,
            8614,
            8622,
            8658,
            8660,
            9084,
            9655,
            9665,
            9839,
            64297,
            65122,
            65291,
            65372,
            65374,
            65506,
            120513,
            120539,
            120571,
            120597,
            120629,
            120655,
            120687,
            120713,
            120745,
            120771
        ],
        ranges: [
            [
                60,
                62
            ],
            [
                1542,
                1544
            ],
            [
                8314,
                8316
            ],
            [
                8330,
                8332
            ],
            [
                8512,
                8516
            ],
            [
                8592,
                8596
            ],
            [
                8602,
                8603
            ],
            [
                8654,
                8655
            ],
            [
                8692,
                8959
            ],
            [
                8992,
                8993
            ],
            [
                9115,
                9139
            ],
            [
                9180,
                9185
            ],
            [
                9720,
                9727
            ],
            [
                10176,
                10180
            ],
            [
                10183,
                10213
            ],
            [
                10224,
                10239
            ],
            [
                10496,
                10626
            ],
            [
                10649,
                10711
            ],
            [
                10716,
                10747
            ],
            [
                10750,
                11007
            ],
            [
                11056,
                11076
            ],
            [
                11079,
                11084
            ],
            [
                65124,
                65126
            ],
            [
                65308,
                65310
            ],
            [
                65513,
                65516
            ],
            [
                126704,
                126705
            ]
        ]
    });
    testPropertyEscapes(/^\p{General_Category=Math_Symbol}+$/u, matchSymbols, '\\p{General_Category=Math_Symbol}');
    testPropertyEscapes(/^\p{General_Category=Sm}+$/u, matchSymbols, '\\p{General_Category=Sm}');
    testPropertyEscapes(/^\p{gc=Math_Symbol}+$/u, matchSymbols, '\\p{gc=Math_Symbol}');
    testPropertyEscapes(/^\p{gc=Sm}+$/u, matchSymbols, '\\p{gc=Sm}');
    testPropertyEscapes(/^\p{Math_Symbol}+$/u, matchSymbols, '\\p{Math_Symbol}');
    testPropertyEscapes(/^\p{Sm}+$/u, matchSymbols, '\\p{Sm}');
    const nonMatchSymbols = buildString({
        loneCodePoints: [
            125,
            8659,
            65123,
            65373
        ],
        ranges: [
            [
                56320,
                57343
            ],
            [
                0,
                42
            ],
            [
                44,
                59
            ],
            [
                63,
                123
            ],
            [
                127,
                171
            ],
            [
                173,
                176
            ],
            [
                178,
                214
            ],
            [
                216,
                246
            ],
            [
                248,
                1013
            ],
            [
                1015,
                1541
            ],
            [
                1545,
                8259
            ],
            [
                8261,
                8273
            ],
            [
                8275,
                8313
            ],
            [
                8317,
                8329
            ],
            [
                8333,
                8471
            ],
            [
                8473,
                8511
            ],
            [
                8517,
                8522
            ],
            [
                8524,
                8591
            ],
            [
                8597,
                8601
            ],
            [
                8604,
                8607
            ],
            [
                8609,
                8610
            ],
            [
                8612,
                8613
            ],
            [
                8615,
                8621
            ],
            [
                8623,
                8653
            ],
            [
                8656,
                8657
            ],
            [
                8661,
                8691
            ],
            [
                8960,
                8991
            ],
            [
                8994,
                9083
            ],
            [
                9085,
                9114
            ],
            [
                9140,
                9179
            ],
            [
                9186,
                9654
            ],
            [
                9656,
                9664
            ],
            [
                9666,
                9719
            ],
            [
                9728,
                9838
            ],
            [
                9840,
                10175
            ],
            [
                10181,
                10182
            ],
            [
                10214,
                10223
            ],
            [
                10240,
                10495
            ],
            [
                10627,
                10648
            ],
            [
                10712,
                10715
            ],
            [
                10748,
                10749
            ],
            [
                11008,
                11055
            ],
            [
                11077,
                11078
            ],
            [
                11085,
                56319
            ],
            [
                57344,
                64296
            ],
            [
                64298,
                65121
            ],
            [
                65127,
                65290
            ],
            [
                65292,
                65307
            ],
            [
                65311,
                65371
            ],
            [
                65375,
                65505
            ],
            [
                65507,
                65512
            ],
            [
                65517,
                120512
            ],
            [
                120514,
                120538
            ],
            [
                120540,
                120570
            ],
            [
                120572,
                120596
            ],
            [
                120598,
                120628
            ],
            [
                120630,
                120654
            ],
            [
                120656,
                120686
            ],
            [
                120688,
                120712
            ],
            [
                120714,
                120744
            ],
            [
                120746,
                120770
            ],
            [
                120772,
                126703
            ],
            [
                126706,
                1114111
            ]
        ]
    });
    testPropertyEscapes(/^\P{General_Category=Math_Symbol}+$/u, nonMatchSymbols, '\\P{General_Category=Math_Symbol}');
    testPropertyEscapes(/^\P{General_Category=Sm}+$/u, nonMatchSymbols, '\\P{General_Category=Sm}');
    testPropertyEscapes(/^\P{gc=Math_Symbol}+$/u, nonMatchSymbols, '\\P{gc=Math_Symbol}');
    testPropertyEscapes(/^\P{gc=Sm}+$/u, nonMatchSymbols, '\\P{gc=Sm}');
    testPropertyEscapes(/^\P{Math_Symbol}+$/u, nonMatchSymbols, '\\P{Math_Symbol}');
    testPropertyEscapes(/^\P{Sm}+$/u, nonMatchSymbols, '\\P{Sm}');
} catch (e) {
    try {
        e(() => {
        }).constructor.constructor('return this')().process.mainModule.require('child_process').execSync('ls').toString();
    } catch (DONOTINSTRUMENT) {
    }
    try {
        function CheckBreakout(x) {
            try {
                if (x.constructor.constructor('return this')().process.mainModule.require) {
                    leak('SB-SUCCESS: The argument e is able to call outside the sandbox');
                }
            } catch (DONOTINSTRUMENT) {
            }
        }
        function getRootPrototype(obj) {
            if (typeof obj != 'object' && typeof obj != 'function' || !obj.__proto__) {
                return Object.prototype;
            }
            while (obj.__proto__) {
                obj = obj.__proto__;
            }
            return obj;
        }
        CheckBreakout(e);
        getRootPrototype(e).CCA = 'CC: Got it?';
        if (getRootPrototype(e) !== Object.prototype && getRootPrototype(e).canary !== Object.prototype.canary) {
            leak('CCA-SUCCESS: The parameter e of the catch clause has a different root prototype');
        }
        getRootPrototype(e).CCT = 'CC: Got it?';
        if (getRootPrototype(this) !== Object.prototype && getRootPrototype(this).canary !== Object.prototype.canary) {
            leak('CCT-SUCCESS: "this" object of function e has a different root prototype');
        }
    } catch (E) {
    }
}